<!--
This file is copyright of Prolifics - (c) Prolifics 2015. All rights reserved. You are not permitted to make copy, modify, or redistribute this file.

See the readme.txt file for further terms and conditions.
-->

<project name="build" default="assembleApp">

	<!-- Import common -->

	<import file="${BUILD_TOOLS}/build-common-linux/build-common.xml" />

	<!-- Load ant contrib -->

	<echo message="Load ant contrib" />
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${BUILD_TOOLS}/build-common-linux/lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<if>
		<not>
			<isset property="pbc.platform" />
		</not>
		<then>

			<!-- Import RTC toolkit -->

			<import file="${BUILD_TOOLKIT}/BuildToolkitTaskDefs.xml" />

		</then>
		<else>

			<!-- Import other toolkit that overrides standard RTC targets -->

			<import file="${BUILD_TOOLS}/build-common-linux/platform/${pbc.platform}/BuildToolkitTaskDefs.xml" />

		</else>
	</if>

	<target name="prototype" depends="-init">

		<!-- Get systemId from stateStore.path -->

		<propertyregex property="systemId" override="true" input="${stateStore.path}" regexp="(.*)/" select="\1" defaultValue="${stateStore.path}" />

		<!-- Read state from state store -->

		<antcall target="-readSystemState">
			<param name="systemId" value="${systemId}" />
			<param name="responseFile" value="${BUILD_LOGS}/retrieveSystemProperties.log" />
		</antcall>

		<!-- Create temp json -->

		<echo message="Duplicate json file to create temp version for updating" />

		<copy file="${BUILD_LOGS}/retrieveSystemProperties.log" tofile="${BUILD_TMP}/updateStateStoreJson.json" overwrite="true" />

		<!-- Make changes to json -->

		<antcall target="-updateStateStoreJson">
			<param name="stateStoreJsonFile" value="${BUILD_TMP}/updateStateStoreJson.json" />
		</antcall>

	</target>

	<target name="assembleApp" depends="-init">

		<antcall target="-assembleApp" />
		<antcall target="-storeApp" />
		<antcall target="-copyOverrideFiles" />

	</target>

	<target name="deployApp" depends="-init, -initAppDeploy">

		<antcall target="-deployApp" />
		<antcall target="-deployAppProperties" />
		<antcall target="-restartBrokers" />
		<antcall target="-stopFlows" />

	</target>

	<target name="deployAppOnlyBars" depends="-init, -initAppDeploy">

		<antcall target="-deployApp" />
		<antcall target="-restartBrokers" />
		<antcall target="-stopFlows" />

	</target>

	<target name="deployAppNoStopStart" depends="-init, -initAppDeploy">

		<antcall target="-deployApp" />

	</target>

	<target name="deployAppOnlyProperties" depends="-init">

		<antcall target="-deployAppProperties" />
		<antcall target="-restartBrokers" />

	</target>

	<target name="assembleAndDeployApp" depends="-init, -initAppDeploy">

		<antcall target="-assembleApp" />
		<antcall target="-storeApp" />
		<antcall target="-copyOverrideFiles" />
		<antcall target="-deployApp" />
		<antcall target="-deployAppProperties" />
		<antcall target="-restartBrokers" />
		<antcall target="-stopFlows" />

	</target>

	<target name="overrideAndDeployApp" depends="-init, -initAppDeploy">

		<antcall target="-overrideApp" />
		<antcall target="-deployApp" />
		<antcall target="-deployAppProperties" />
		<antcall target="-restartBrokers" />
		<antcall target="-stopFlows" />

	</target>

	<target name="overrideApp" depends="-init">

		<antcall target="-overrideApp" />

	</target>

	<target name="assembleOverrideAndDeployApp" depends="-init, -initAppDeploy">

		<antcall target="-assembleApp" />
		<antcall target="-storeApp" />
		<antcall target="-copyOverrideFiles" />
		<antcall target="-overrideApp" />
		<antcall target="-deployApp" />
		<antcall target="-deployAppProperties" />
		<antcall target="-restartBrokers" />
		<antcall target="-stopFlows" />

	</target>

	<target name="restartBrokers" depends="-init">

		<antcall target="-restartBrokers" />

	</target>

	<target name="stopFlows" depends="-init">

		<antcall target="-stopFlows" />

	</target>

	<target name="-stopFlows" depends="">

		<!-- Only look to stop flows if IIB_STOP_HOSTS.list is set -->

		<if>
			<isset property="IIB_STOP_HOSTS.list" />
			<then>

				<startBuildActivity label="Stopping message flows" activityIdProperty="stopFlows" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

				<!-- For each host that we need to stop flows on... -->

				<for list="${IIB_STOP_HOSTS.list}" param="iibRemoteBrokerHost" delimiter=";">
					<sequential>

						<!-- For each bar file... -->

						<for list="${bars.list}" param="barName" delimiter=";">
							<sequential>

								<var name="IIB_PORT" unset="true" />
								<var name="IIB_QMGR" unset="true" />
								<var name="execGroup" unset="true" />
								<propertycopy property="IIB_PORT" from="IIB_PORT.@{iibRemoteBrokerHost}" />
								<propertycopy property="IIB_QMGR" from="IIB_QMGR.@{iibRemoteBrokerHost}" />

								<!-- Unzip bar to tmp in case we need this later to check for flows -->

								<unzip src="${ASSEMBLY_BARS}/@{barName}.bar" dest="${BUILD_TMP}" />

								<!-- Get execution group from bar or otherwise default for all bars -->

								<if>
									<isset property="bar.@{barName}.execGroup" />
									<then>
										<propertycopy property="execGroup" from="bar.@{barName}.execGroup" />
									</then>
									<else>
										<propertycopy property="execGroup" from="IIB_EXEC_GRP" />
									</else>
								</if>

								<if>
									<isset property="bar.@{barName}.stopFlows.list" />
									<then>

										<!-- For each flow that needs to be stopped... -->

										<for list="${bar.@{barName}.stopFlows.list}" param="stopFlow" delimiter=";">
											<sequential>

												<echo message="Found flow that needs to be stopped: @{stopFlow}" />

												<!-- Check each application to see which one the flow belongs to... -->

												<for list="${bar.@{barName}.applications.list}" param="application" delimiter=";">
													<sequential>

														<!-- Strip out single quotes from application string -->

														<propertyregex property="strippedApplication" input="@{application}" regexp="&apos;" replace="" global="true" defaultValue="@{application}" />

														<!-- Create dir for app in tmp -->

														<mkdir dir="${BUILD_TMP}/appSource/${strippedApplication}" />

														<!-- Check if we have source local -->

														<if>
															<available file="${BUILD_SOURCE}/${strippedApplication}" type="dir" />

															<then>

																<!-- Copy source of app to tmp so that we can later look for the flow -->

																<copy todir="${BUILD_TMP}/appSource/${strippedApplication}">
																	<fileset dir="${BUILD_SOURCE}/${strippedApplication}">
																		<include name="**" />
																	</fileset>
																</copy>

															</then>

															<else>

																<!-- Unzip appzip to tmp - this contains the source so that we can later look for the flow -->

																<unzip src="${BUILD_TMP}/${strippedApplication}.appzip" dest="${BUILD_TMP}/appSource/${strippedApplication}" />

															</else>
														</if>

														<!-- If flow is part of this application (needs to be in root of application) then go ahead and stop it -->

														<echo message="Checking for ${BUILD_TMP}/appSource/${strippedApplication}/@{stopFlow}.msgflow" />

														<if>
															<available file="${BUILD_TMP}/appSource/${strippedApplication}/@{stopFlow}.msgflow" type="file" />

															<then>

																<echo message="Found application for flow: @{application} for @{stopFlow}" />

																<startBuildActivity label="Stopping @{stopFlow} flow (part of @{application} application)" parentActivityId="${stopFlows}" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

																<antcall target="-stopFlow">

																	<param name="iibApp" value="@{application}" />
																	<param name="iibMsgFlow" value="@{stopFlow}" />
																	<param name="execGroup" value="${execGroup}" />
																	<param name="iibRemoteHost" value="@{iibRemoteBrokerHost}" />
																	<param name="iibPort" value="${IIB_PORT}" />
																	<param name="iibQMgr" value="${IIB_QMGR}" />

																</antcall>

															</then>

														</if>

														<!-- Otherwise do nothing -->

													</sequential>
												</for>

											</sequential>
										</for>

									</then>
									<else>

										<echo message="NOTE: No flows to stop for @{barName}" />

									</else>
								</if>

							</sequential>
						</for>
					</sequential>
				</for>

			</then>

			<else>
				<echo message="NOTE: Not stopping any flows as IIB_STOP_HOSTS.list is not set." />
			</else>
		</if>
	</target>

	<target name="-restartBrokers">

		<if>
			<equals arg1="${RESTART_BROKER}" arg2="Y" />
			<then>

				<startBuildActivity label="Restart the brokers" activityIdProperty="restartBrokers" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

				<!-- For each host... -->

				<for list="${IIB_HOSTS.list}" param="hostName" delimiter=";">

					<sequential>

						<!-- Restart broker for host -->

						<var name="brokerName" unset="true" />
						<var name="brokerName" value="${IIB_BROKER.@{hostName}}" />

						<startBuildActivity label="Restart ${brokerName} broker on host @{hostName}" parentActivityId="${restartBrokers}" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

						<antcall target="-restartBroker">
							<param name="restartUser" value="${RESTART_USER_ID}" />
							<param name="restartPassword" value="${RESTART_PASSWORD}" />
							<param name="restartHost" value="@{hostName}" />
							<param name="brokerName" value="${brokerName}" />
						</antcall>

					</sequential>
				</for>

			</then>
			<else>
				<echo message="NOTE: Not restarting broker as RESTART_BROKER not set to 'Y'." />

			</else>
		</if>

	</target>

	<target name="-stopFlow">

		<!-- Write out trace -->

		<echo message="Stopping message flow: ${BUILD_SUBSCRIPTS}/stopMessageFlow.sh ${iibApp} ${iibMsgFlow} - ${execGroup} ${MQSI_BIN} ${BUILD_HOME} ${iibRemoteHost} ${iibPort} ${iibQMgr} ${RTC_USER_ID} ${BUILD_LOGS}/stopMsgFlow-${iibApp}-${iibMsgFlow}-${iibRemoteHost}.log" />

		<!-- Initialize timeout switch -->

		<var name="iib_timeout_switch" unset="true" />
		<var name="iib_timeout_switch" value="" />

		<!-- If timeout has been set -->

		<if>
			<isset property="IIB_TIMEOUT" />
			<then>

				<!-- Set timeout switch -->

				<var name="iib_timeout_switch" value="-w ${IIB_TIMEOUT}" />
			</then>
			<else>

				<!-- No timeout switch -->

				<var name="iib_timeout_switch" value="" />
			</else>
		</if>

		<!-- Run stop message flow script -->

		<exec dir="${BUILD_SUBSCRIPTS}" executable="sh" output="${BUILD_LOGS}/IIBStopMsgFlow-${iibMsgFlow}-${iibRemoteHost}.log" failonerror="false" resultproperty="error.IIBStopMsgFlow.property">
			<arg value="stopMsgFlow.sh" />
			<arg value="${iibApp}" />
			<arg value="${iibMsgFlow}" />
			<arg value="" />
			<arg value="${execGroup}" />
			<arg value="${MQSI_BIN}" />
			<arg value="${BUILD_HOME}" />
			<arg value="${iibRemoteHost}" />
			<arg value="${iibPort}" />
			<arg value="${iibQMgr}" />
			<arg value="${iib_timeout_switch}" />
			<arg value="${BUILD_LOGS}/stopMsgFlow-${iibMsgFlow}-${iibRemoteHost}.log" />
		</exec>

		<!-- Check for errors -->

		<antcall target="-checkIIBErrors">
			<param name="fileToCheck" value="${BUILD_LOGS}/IIBStopMsgFlow-${iibMsgFlow}-${iibRemoteHost}.log" />
			<param name="fileToCheckLabel" value="Stop ${iibApp}-${iibMsgFlow} log file (with error description)." />
			<param name="returnCode" value="${error.IIBStopMsgFlow.property}" />
		</antcall>

	</target>

	<target name="-assembleApp" depends="">

		<startBuildActivity label="Assemble the bars" activityIdProperty="creatingBars" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

		<!-- For each bar that needs to be assembled... -->

		<for list="${bars.list}" param="barName" delimiter=";">

			<sequential>

				<!-- Check to see if the bar is in the use existing bar list -->

				<var name="useExistingBar" unset="true" />
				<var name="useExistingBar" value="FALSE" />

				<for list="${useExistingBars.list}" param="useExistingBarName" delimiter=";">
					<sequential>

						<if>
							<equals arg1="@{barName}" arg2="@{useExistingBarName}" />
							<then>
								<var name="useExistingBar" value="TRUE" />
							</then>
						</if>

					</sequential>
				</for>

				<!-- Either assemble a new bar use the existing bar -->

				<if>
					<equals arg1="${useExistingBar}" arg2="FALSE" />
					<then>

						<!-- Copy source files to temp area for build (so we can adjust classpaths and exclude unwanted folders/files) -->

						<if>
							<isset property="iib.excludeFromBars" />
							<then>

								<copy todir="${BUILD_TMP}/source">
									<fileset dir="${BUILD_SOURCE}">
										<include name="**" />
										<exclude name="${iib.excludeFromBars}" />
									</fileset>
								</copy>

							</then>
							<else>

								<copy todir="${BUILD_TMP}/source">
									<fileset dir="${BUILD_SOURCE}">
										<include name="**" />
									</fileset>
								</copy>

							</else>
						</if>

						<!-- Replace vars in classpath files -->

						<replace dir="${BUILD_TMP}/source" value="lib&quot; path=&quot;${COMMON_JARS_HOME}">
							<include name="**/.classpath" />
							<replacetoken>var&quot; path=&quot;COMMON_JARS_HOME</replacetoken>
						</replace>

						<!-- Continue with assembly steps -->

						<var name="barDeployableFiles" unset="true" />
						<var name="barTempDeployableFiles" unset="true" />
						<var name="barProjects" unset="true" />
						<var name="barTempProjects" unset="true" />
						<var name="barApplications" unset="true" />
						<var name="barTempApplications" unset="true" />
						<var name="barLibrariesSwitch" unset="true" />
						<var name="barTempLibrariesSwitch" unset="true" />

						<!-- If bar has an application we use the new style of building the application -->

						<if>
							<isset property="bar.@{barName}.applications.list" />
							<then>

								<propertycopy property="barTempApplications" from="bar.@{barName}.applications.list" />
								<propertyregex property="barApplications" override="true" input="${barTempApplications}" regexp=";" replace=" " defaultValue="${barTempApplications}" />

							</then>
							<else>

								<!-- Otherwise we use the old style of buildiung projects -->

								<propertycopy property="barTempProjects" from="bar.@{barName}.projects.list" />
								<propertyregex property="barProjects" override="true" input="${barTempProjects}" regexp=";" replace=" " defaultValue="${barTempProjects}" />
							</else>
						</if>

						<!-- If we have a list of libraries ... -->

						<if>
							<isset property="libraries.list" />
							<then>

								<!-- If the list is empty then fail -->

								<if>
									<equals arg1="${libraries.list}" arg2="" />
									<then>

										<fail message="Do not set libraries.list to an empty string. It must either have a value, or not be set at all." />
									</then>
								</if>

								<!-- Otherwise set the libraries switch -->

								<var name="barTempLibrariesSwitch" value="-l ${libraries.list}" />
								<propertyregex property="barLibrariesSwitch" override="true" input="${barTempLibrariesSwitch}" regexp=";" replace=" " defaultValue="${barTempLibrariesSwitch}" />

							</then>
							<else>

								<!-- Otherwise leave the libraries switch empty -->

								<var name="barLibrariesSwitch" value="" />
							</else>
						</if>

						<!-- If there is a list of files to deploy, make it a space delimited list -->

						<if>
							<isset property="bar.@{barName}.deployableFiles.list" />
							<then>
								<propertycopy property="barTempDeployableFiles" from="bar.@{barName}.deployableFiles.list" />
								<propertyregex property="barDeployableFiles" override="true" input="${barTempDeployableFiles}" regexp=";" replace=" " defaultValue="${barTempDeployableFiles}" />
							</then>
						</if>

						<!-- Assemble the bar -->

						<startBuildActivity label="Assemble the @{barName} bar" parentActivityId="${creatingBars}" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

						<if>
							<equals arg1="${PREVIEW}" arg2="Y" />
							<then>

								<echo message="NOTE: Running in preview mode - actions will be displayed only and not executed." />

								<if>
									<isset property="bar.@{barName}.applications.list" />
									<then>

										<echo message="PREVIEW: ./mqsicreatebar -data ${BUILD_TMP}/source -b ${BUILD_OUTPUT}/@{barName}.bar -a ${barApplications} -deployAsSource ${barLibrariesSwitch} -trace -v ${BUILD_LOGS}/assemble-@{barName}.log" />
									</then>
									<else>
										<echo message="PREVIEW: ./mqsicreatebar -data ${BUILD_TMP}/source -b ${BUILD_OUTPUT}/@{barName}.bar -p ${barProjects} -o ${barDeployableFiles} ${barLibrariesSwitch} -deployAsSource -trace -v ${BUILD_LOGS}/assemble-@{barName}.log" />
									</else>
								</if>
							</then>
							<else>

								<!-- Assemble as an application -->

								<if>
									<isset property="bar.@{barName}.applications.list" />
									<then>

										<echo message="Building applications: ${barApplications}" />
										
										<echo message="IIT_BIN: ${IIT_BIN}" />
										
										<echo message="barLibrariesSwitch: ${barLibrariesSwitch}" />
										
										<echo message="BUILD_TMP: ${BUILD_TMP}" />
										
										<echo message="BUILD_LOGS: ${BUILD_LOGS}" />
										

										<exec dir="./" executable="${IIT_BIN}/mqsicreatebar" output="${BUILD_LOGS}/IIBBuild.@{barName}.log" failonerror="false" resultproperty="error.IIBBuild.@{barName}">
											<arg line="-data ${BUILD_TMP}/source -b ${BUILD_OUTPUT}/@{barName}.bar -a ${barApplications} -deployAsSource ${barLibrariesSwitch} -trace -v ${BUILD_LOGS}/assemble-@{barName}.log" />
										</exec>

									</then>
									<else>

										<!-- Assemble as one or more projects -->

										<echo message="Building projects: ${barProjects} (with deployableFiles ${barDeployableFiles})" />

										<exec dir="./" executable="${IIT_BIN}/mqsicreatebar" output="${BUILD_LOGS}/IIBBuild.@{barName}.log" failonerror="false" resultproperty="error.IIBBuild.@{barName}">
											<arg line="-data ${BUILD_TMP}/source -b ${BUILD_OUTPUT}/@{barName}.bar -p ${barProjects} -o ${barDeployableFiles} ${barLibrariesSwitch} -deployAsSource -trace -v ${BUILD_LOGS}/assemble-@{barName}.log" />
										</exec>

									</else>
								</if>

								<antcall target="-checkIIBErrors">
									<param name="fileToCheck" value="${BUILD_LOGS}/IIBBuild.@{barName}.log" />
									<param name="fileToCheckLabel" value="Assemble @{barName} log file (with error description)." />
									<param name="returnCode" value="${error.IIBBuild.@{barName}}" />
								</antcall>

								<antcall target="-checkIIBErrors">
									<param name="fileToCheck" value="${BUILD_LOGS}/assemble-@{barName}.log" />
									<param name="fileToCheckLabel" value="Assemble @{barName} log file (with error description)." />
									<param name="returnCode" value="${error.IIBBuild.@{barName}}" />
								</antcall>

								<!-- Publish log and bar -->

								<logPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${BUILD_LOGS}/assemble-@{barName}.log" label="Assemble @{barName} log file" />

								<artifactFilePublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${BUILD_OUTPUT}/@{barName}.bar" label="@{barName} bar" />
							</else>
						</if>

					</then>
					<else>

						<startBuildActivity label="Skipping assembly of the @{barName} bar as it appears in the useExistingBars.list property" parentActivityId="${creatingBars}" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />
						<echo message="NOTE: Skipping assembly of the @{barName} bar as it appears in the useExistingBars.list property" />

					</else>
				</if>

			</sequential>
		</for>

	</target>

	<target name="-copyOverrideFiles" depends="">

		<!-- For each bar file... -->

		<for list="${bars.list}" param="barName" delimiter=";">

			<sequential>

				<if>
					<isset property="bar.@{barName}.propertiesCollection" />
					<then>

						<!-- Zip up property files to output folder, ready to upload in UCD -->

						<echo message="Zip up all properties for @{barName} from: ${BUILD_SOURCE}/${bar.@{barName}.propertiesCollection}" />

						<zip zipfile="${BUILD_OUTPUT}/propertiesCollection.zip" basedir="${BUILD_SOURCE}/${bar.@{barName}.propertiesCollection}" />

					</then>
				</if>

			</sequential>
		</for>

	</target>

	<target name="-storeApp" depends="">

		<!-- Call common routine to deliver artifacts (bars) into source control -->

		<antcall target="-deliverArtifactsToAssembly">
			<param name="deliverComment" value="Storing bar files for build ${buildDefinitionId} ${buildLabel}." />
		</antcall>

	</target>

	<target name="-overrideApp" depends="">

		<startBuildActivity label="Override the bars' properties" activityIdProperty="overrideBars" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

		<!-- For each bar file... -->

		<for list="${bars.list}" param="barName" delimiter=";">

			<sequential>

				<!-- Apply general override -->

				<var name="barApplications" unset="true" />
				<var name="barProperties" unset="true" />

				<if>
					<isset property="bar.@{barName}.applications.list" />
					<then>
						<propertycopy property="barApplications" from="bar.@{barName}.applications.list" />
					</then>
				</if>

				<if>
					<isset property="bar.@{barName}.properties" />
					<then>
						<propertycopy property="barProperties" from="bar.@{barName}.properties" />

						<startBuildActivity label="Overriding properties for @{barName} bar" parentActivityId="${overrideBars}" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

						<!-- Apply override to application bar -->

						<if>
							<isset property="bar.@{barName}.applications.list" />
							<then>

								<for list="${bar.@{barName}.applications.list}" param="applicationName" delimiter=";">

									<sequential>

										<!-- Strip out single quotes or spaces from application string to use in log file name -->

										<var name="strippedApplication" unset="true" />
										<propertyregex property="strippedApplication" input="@{applicationName}" regexp="&apos;| " replace="" global="true" defaultValue="@{applicationName}" />

										<if>
											<equals arg1="${PREVIEW}" arg2="Y" />
											<then>

												<echo message="PREVIEW: ./mqsiapplybaroverride -b ${ASSEMBLY_BARS}/@{barName}.bar -k @{applicationName} -p ${OVERRIDES_PATH}/${barProperties} -v ${BUILD_LOGS}/override-@{barName}-${strippedApplication}.log" />
											</then>
											<else>

												<!-- Override application -->

												<echo message="Overriding application @{applicationName} : ./mqsiapplybaroverride -b ${ASSEMBLY_BARS}/@{barName}.bar -k @{applicationName} -p ${OVERRIDES_PATH}/${barProperties} -v ${BUILD_LOGS}/override-@{barName}-${strippedApplication}.log" />

												<exec dir="./" executable="${IIT_BIN}/../../server/bin/mqsiapplybaroverride" output="${BUILD_LOGS}/IIBOverride.@{barName}.log" failonerror="false" resultproperty="error.IIBOverride.@{barName}">
													<arg line="-b ${ASSEMBLY_BARS}/@{barName}.bar -k @{applicationName} -p ${OVERRIDES_PATH}/${barProperties} -v ${BUILD_LOGS}/override-@{barName}-${strippedApplication}.log" />
												</exec>

												<antcall target="-checkIIBErrors">
													<param name="fileToCheck" value="${BUILD_LOGS}/override-@{barName}-${strippedApplication}.log" />
													<param name="fileToCheckLabel" value="Override @{barName} @{applicationName} log file (with error description)." />
													<param name="returnCode" value="${error.IIBOverride.@{barName}}" />
												</antcall>

												<logPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${BUILD_LOGS}/override-@{barName}-${strippedApplication}.log" label="Override @{barName} @{applicationName} log file" />

											</else>
										</if>
									</sequential>
								</for>

							</then>

							<!-- Apply override to project-based (i.e. non application-based) bar -->

							<else>

								<if>
									<equals arg1="${PREVIEW}" arg2="Y" />
									<then>
										<echo message="PREVIEW: ./mqsiapplybaroverride -b ${ASSEMBLY_BARS}/@{barName}.bar -p ${OVERRIDES_PATH}/${barProperties} -v ${BUILD_LOGS}/override-@{barName}.log" />

									</then>
									<else>
										<exec dir="./" executable="${IIT_BIN}/../../server/bin/mqsiapplybaroverride" output="${BUILD_LOGS}/IIBOverride.@{barName}.log" failonerror="false" resultproperty="error.IIBOverride.@{barName}">
											<arg line="-b ${ASSEMBLY_BARS}/@{barName}.bar -p ${OVERRIDES_PATH}/${barProperties} -v ${BUILD_LOGS}/override-@{barName}.log" />
										</exec>

										<antcall target="-checkIIBErrors">
											<param name="fileToCheck" value="${BUILD_LOGS}/override-@{barName}.log" />
											<param name="fileToCheckLabel" value="Override @{barName} log file (with error description)." />
											<param name="returnCode" value="${error.IIBOverride.@{barName}}" />
										</antcall>

										<logPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${BUILD_LOGS}/override-@{barName}.log" label="Override @{barName} log file" />

									</else>

								</if>

							</else>
						</if>

						<if>
							<not>
								<equals arg1="${PREVIEW}" arg2="Y" />
							</not>
							<then>

								<!-- Publish overridden BAR file -->

								<artifactFilePublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${ASSEMBLY_BARS}/@{barName}.bar" label="@{barName} bar (with override applied - ${barProperties})" />

							</then>
						</if>

					</then>
				</if>

				<!-- Apply host-specific override -->

				<for list="${IIB_HOSTS.list}" param="hostName" delimiter=";">

					<sequential>

						<var name="barProperties" unset="true" />

						<if>
							<isset property="bar.@{barName}.properties.@{hostName}" />
							<then>

								<propertycopy property="barProperties" from="bar.@{barName}.properties.@{hostName}" />

								<startBuildActivity label="Overriding properties for @{barName} bar for host @{hostName}" parentActivityId="${overrideBars}" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

								<!-- Apply override to application bar -->

								<if>
									<isset property="bar.@{barName}.applications.list" />
									<then>

										<for list="${bar.@{barName}.applications.list}" param="applicationName" delimiter=";">

											<sequential>

												<!-- Strip out single quotes and spaces from application string to use for log file name -->

												<var name="strippedApplication" unset="true" />
												<propertyregex property="strippedApplication" input="@{applicationName}" regexp="&apos;| " replace="" global="true" defaultValue="@{applicationName}" />

												<if>
													<equals arg1="${PREVIEW}" arg2="Y" />
													<then>

														<echo message="PREVIEW: ./mqsiapplybaroverride -b ${ASSEMBLY_BARS}/@{barName}.bar -k @{applicationName} -p ${OVERRIDES_PATH}/${barProperties} -o ${ASSEMBLY_BARS}/@{barName}.@{hostName}.bar -v ${BUILD_LOGS}/override-@{barName}-${strippedApplication}.@{hostName}.log" />
													</then>
													<else>

														<!-- Override application -->

														<exec dir="./" executable="${IIT_BIN}/../../server/bin/mqsiapplybaroverride" output="${BUILD_LOGS}/IIBOverride.@{barName}.@{hostName}.log" failonerror="false" resultproperty="error.IIBOverride.@{barName}.@{hostName}">
															<arg line="-b ${ASSEMBLY_BARS}/@{barName}.bar -k @{applicationName} -p ${OVERRIDES_PATH}/${barProperties} -o ${ASSEMBLY_BARS}/@{barName}.@{hostName}.bar -v ${BUILD_LOGS}/override-@{barName}-${strippedApplication}.@{hostName}.log" />
														</exec>

														<antcall target="-checkIIBErrors">
															<param name="fileToCheck" value="${BUILD_LOGS}/override-@{barName}-${strippedApplication}.@{hostName}.log" />
															<param name="fileToCheckLabel" value="Override @{barName} @{applicationName} log file (with error description)." />
															<param name="returnCode" value="${error.IIBOverride.@{barName}.@{hostName}}" />
														</antcall>

														<logPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${BUILD_LOGS}/override-@{barName}-${strippedApplication}.@{hostName}.log" label="Override @{barName} log file" />

													</else>
												</if>

											</sequential>
										</for>

									</then>

									<!-- Apply override to project-based (i.e. non application-based) bar -->

									<else>

										<if>
											<equals arg1="${PREVIEW}" arg2="Y" />
											<then>
												<echo message="PREVIEW: ./mqsiapplybaroverride -b ${ASSEMBLY_BARS}/@{barName}.bar -p ${OVERRIDES_PATH}/${barProperties} -o ${ASSEMBLY_BARS}/@{barName}.@{hostName}.bar -v ${BUILD_LOGS}/override-@{barName}.@{hostName}.log" />

											</then>
											<else>
												<exec dir="./" executable="${IIT_BIN}/../../server/bin/mqsiapplybaroverride" output="${BUILD_LOGS}/IIBOverride.@{barName}.@{hostName}.log" failonerror="false" resultproperty="error.IIBOverride.@{barName}.@{hostName}">
													<arg line="-b ${ASSEMBLY_BARS}/@{barName}.bar -p ${OVERRIDES_PATH}/${barProperties} -o ${ASSEMBLY_BARS}/@{barName}.@{hostName}.bar -v ${BUILD_LOGS}/override-@{barName}.@{hostName}.log" />
												</exec>

												<antcall target="-checkIIBErrors">
													<param name="fileToCheck" value="${BUILD_LOGS}/override-@{barName}.@{hostName}.log" />
													<param name="fileToCheckLabel" value="Override @{barName} log file (with error description)." />
													<param name="returnCode" value="${error.IIBOverride.@{barName}.@{hostName}}" />
												</antcall>

												<logPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${BUILD_LOGS}/override-@{barName}.@{hostName}.log" label="Override @{barName} log file" />

											</else>

										</if>

									</else>
								</if>

								<if>
									<not>
										<equals arg1="${PREVIEW}" arg2="Y" />
									</not>
									<then>

										<artifactFilePublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${ASSEMBLY_BARS}/@{barName}.@{hostName}.bar" label="@{barName} bar (with override applied for host @{hostName} - ${barProperties})" />

									</then>
								</if>
							</then>
						</if>
					</sequential>
				</for>

			</sequential>
		</for>

	</target>

	<target name="-deployAppProperties" depends="-initTarget">

		<if>
			<isset property="propertyFileProjects.list" />
			<then>

				<startBuildActivity label="Deploy application property files" activityIdProperty="deployPropertyFiles" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

				<for list="${IIB_HOSTS.list}" param="targetHost" delimiter=";">

					<sequential>

						<startBuildActivity label="Deploy property files to @{targetHost} host" parentActivityId="${deployPropertyFiles}" activityIdProperty="deployPropertyFilesForHost" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

						<for list="${propertyFileProjects.list}" param="propFileProject" delimiter=";">

							<sequential>

								<startBuildActivity label="Deploy property files in @{propFileProject} property file project" parentActivityId="${deployPropertyFilesForHost}" activityIdProperty="deployPropertyFilesProjectForHost" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

								<for param="fileInDirectory">
									<path>
										<fileset dir="${BUILD_SOURCE}/@{propFileProject}">
											<include name="*" />
											<exclude name=".project" />
										</fileset>
									</path>
									<sequential>

										<var name="fileInDirectoryName" unset="true" />
										<basename property="fileInDirectoryName" file="@{fileInDirectory}" />

										<echo message="Prepare to deploy ${fileInDirectoryName} to @{targetHost}" />

										<startBuildActivity label="Deploying ${fileInDirectoryName} application properties file to @{targetHost}" parentActivityId="${deployPropertyFilesProjectForHost}" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

										<if>
											<equals arg1="${PREVIEW}" arg2="Y" />
											<then>
												<echo message="NOTE: Running in preview mode - actions will be displayed only and not executed." />
												<echo message="PREVIEW: ${BUILD_SUBSCRIPTS}/fileDeploy.sh ${TARGET_OS_USER_ID} ***** @{targetHost} @{fileInDirectory} ${propertyFileProject.@{propFileProject}.targetFolder}/${fileInDirectoryName}" />
											</then>
											<else>
												<echo message="${BUILD_SUBSCRIPTS}/fileDeploy.sh ${TARGET_OS_USER_ID} ****** @{targetHost} @{fileInDirectory} ${propertyFileProject.@{propFileProject}.targetFolder}/${fileInDirectoryName}" />
												<exec dir="${BUILD_SUBSCRIPTS}/" executable="/usr/bin/expect" output="${BUILD_LOGS}/DeployProps.@{propFileProject}.${fileInDirectoryName}.@{targetHost}.log" failonerror="false" resultProperty="result.DeployProps.@{propFileProject}.${fileInDirectoryName}.@{targetHost}">
													<arg line="fileDeploy.sh" />
													<arg value="${TARGET_OS_USER_ID}" />
													<arg value="${targetOSPassword}" />
													<arg value="@{targetHost}" />
													<arg value="@{fileInDirectory}" />
													<arg value="${propertyFileProject.@{propFileProject}.targetFolder}/${fileInDirectoryName}" />

												</exec>

												<antcall target="-checkFileDeployErrors">
													<param name="fileToCheck" value="${BUILD_LOGS}/DeployProps.@{propFileProject}.${fileInDirectoryName}.@{targetHost}.log" />
													<param name="fileToCheckLabel" value="Deploy log for ${fileInDirectoryName} application properties file deployment to @{targetHost} (with error description)." />
												</antcall>

												<logPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${BUILD_LOGS}/DeployProps.@{propFileProject}.${fileInDirectoryName}.@{targetHost}.log" label="Deploy log for ${fileInDirectoryName} application properties file deployment to @{targetHost}." />

												<var name="result" unset="true" />
												<propertycopy property="result" from="result.DeployProps.@{propFileProject}.${fileInDirectoryName}.@{targetHost}" />

												<fail message="Failed to deploy ${fileInDirectoryName} application properties file to @{targetHost} - see DeployProps.@{propFileProject}.${fileInDirectoryName}.@{targetHost}.log for further details.">
													<condition>
														<not>
															<equals arg1="${result}" arg2="0" />
														</not>
													</condition>
												</fail>
											</else>
										</if>
									</sequential>
								</for>

							</sequential>

						</for>

					</sequential>

				</for>

			</then>
		</if>

	</target>

	<target name="-deployApp" depends="">

		<startBuildActivity label="Deploy the bars" activityIdProperty="deployBars" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />

		<if>
			<isset property="IIB_HOSTS.list" />
			<then>
				<echo message="Deploy to hosts ${IIB_HOSTS.list}" />
			</then>
			<else>
				<var name="IIB_HOSTS.list" value="NO_HOSTS" />
			</else>
		</if>

		<!-- For each host to deploy to... -->

		<for list="${IIB_HOSTS.list}" param="iibRemoteBrokerHost" delimiter=";">
			<sequential>

				<!-- Set switches -->

				<var name="iib_clean_deploy_switch" unset="true" />
				<var name="iib_clean_deploy_switch" value="" />

				<if>
					<isset property="IIB_TIMEOUT" />
					<then>
						<var name="iib_timeout_switch" value="-w ${IIB_TIMEOUT}" />
					</then>
					<else>
						<var name="iib_timeout_switch" value="" />
					</else>
				</if>

				<!-- Create empty host clean list to use to determine if execution group has already been cleaned for this deploy (don't want to clean it more than once) -->

				<touch file="${BUILD_TMP}/@{iibRemoteBrokerHost}.${TMP_CLEAN_LIST_NAME}" />

				<!-- For each bar file... -->

				<for list="${bars.list}" param="barName" delimiter=";">

					<sequential>

						<var name="IIB_PORT" unset="true" />
						<var name="IIB_QMGR" unset="true" />
						<var name="execGroup" unset="true" />
						<var name="barToDeploy" unset="true" />

						<if>
							<isset property="IIB_PORT.@{iibRemoteBrokerHost}" />
							<then>
								<propertycopy property="IIB_PORT" from="IIB_PORT.@{iibRemoteBrokerHost}" />
							</then>
							<else>
								<var name="IIB_PORT" value="NO_PORT" />
							</else>
						</if>

						<if>
							<isset property="IIB_QMGR.@{iibRemoteBrokerHost}" />
							<then>
								<propertycopy property="IIB_QMGR" from="IIB_QMGR.@{iibRemoteBrokerHost}" />
							</then>
							<else>
								<var name="IIB_QMGR" value="NO_QMGR" />
							</else>
						</if>

						<!-- Get execution group for bar or use default for all bars -->

						<if>
							<isset property="bar.@{barName}.execGroup" />
							<then>
								<propertycopy property="execGroup" from="bar.@{barName}.execGroup" />
							</then>
							<else>
								<propertycopy property="execGroup" from="IIB_EXEC_GRP" />
							</else>
						</if>

						<if>
							<equals arg1="${IIB_CLEAN_DEPLOY}" arg2="Y" />
							<then>

								<!-- If there is at least one exec group in clean list -->

								<var name="hostCleanListSize" unset="true" />
								<length file="${BUILD_TMP}/@{iibRemoteBrokerHost}.${TMP_CLEAN_LIST_NAME}" property="hostCleanListSize" />
								<echo message="size = ${hostCleanListSize}" />

								<if>
									<not>
										<equals arg1="${hostCleanListSize}" arg2="0" />
									</not>
									<then>

										<!-- Check to see if exec group in host clean list already -->

										<var name="hostCleanList" unset="true" />
										<loadfile property="hostCleanList" srcfile="${BUILD_TMP}/@{iibRemoteBrokerHost}.${TMP_CLEAN_LIST_NAME}" />
										<var name="egInFile" unset="true" />

										<echo message="hostCleanList = [${hostCleanList}]... about to look in this file for ${execGroup}" />

										<for list="${hostCleanList}" delimiter="${line.separator}" param="hostCleanLine">
											<sequential>

												<echo message="is ${execGroup} = @{hostCleanLine}?" />

												<if>
													<equals arg1="@{hostCleanLine}" arg2="${execGroup}" />

													<then>
														<var name="egInFile" value="Y" />
													</then>
												</if>

											</sequential>
										</for>

									</then>
								</if>

								<!-- If not in host clean list then set switch to -m and add to clean list -->

								<if>
									<not>
										<equals arg1="${egInFile}" arg2="Y" />
									</not>
									<then>
										<var name="iib_clean_deploy_switch" value="-m" />
										<echo file="${BUILD_TMP}/@{iibRemoteBrokerHost}.${TMP_CLEAN_LIST_NAME}" append="true">${execGroup}${line.separator}</echo>
									</then>
									<else>
										<echo message="Don't set -m because already cleaned this execution group" />
										<var name="iib_clean_deploy_switch" value="" />
									</else>
								</if>

							</then>
							<else>
								<var name="iib_clean_deploy_switch" value="" />
							</else>
						</if>

						<!-- If a host-specific bar exists then deploy that (this is created when host specific overrides are applied) -->

						<if>
							<available file="${ASSEMBLY_BARS}/@{barName}.@{iibRemoteBrokerHost}.bar" type="file" />
							<then>
								<var name="barToDeploy" value="${ASSEMBLY_BARS}/@{barName}.@{iibRemoteBrokerHost}.bar" />
								<startBuildActivity label="Deploying the @{barName} (@{iibRemoteBrokerHost}) bar to ${execGroup} execution group on @{iibRemoteBrokerHost}.${IIB_PORT}.${IIB_QMGR}" parentActivityId="${deployBars}" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />
							</then>

							<!-- Otherwise deploy standard bar -->

							<else>
								<var name="barToDeploy" value="${ASSEMBLY_BARS}/@{barName}.bar" />
								<startBuildActivity label="Deploying the @{barName} bar to ${execGroup} execution group on @{iibRemoteBrokerHost}.${IIB_PORT}.${IIB_QMGR}" parentActivityId="${deployBars}" autoComplete="true" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" />
							</else>
						</if>

						<!-- Deploy the bar using one of the mechanisms listed below -->

						<if>
							<isset property="OS_KEYFILE" />
							<then>

								<!-- Deploy bar by running mqsideploy command on remote machine -->

								<echo message="Deploying bar file: sshexec . $IIB_BIN/mqsiprofile;$IIB_BIN/mqsideploy $IIB_BROKER -e ${execGroup} -a ${barToDeploy} ${iib_clean_deploy_switch} ${iib_timeout_switch} -v ${BUILD_LOGS}/deploy-@{barName}-@{iibRemoteBrokerHost}.log" />

								<antcall target="-sshWithKeyfile">

									<param name="targetHost" value="@{iibRemoteBrokerHost}" />
									<param name="targetUser" value="${OS_USER_ID}" />
									<param name="keyfile" value="${OS_KEYFILE}" />
									<param name="command" value=". $IIB_BIN/mqsiprofile;$IIB_BIN/mqsideploy $IIB_BROKER -e ${execGroup} -a ${barToDeploy} ${iib_clean_deploy_switch} ${iib_timeout_switch} -v ${BUILD_LOGS}/deploy-@{barName}-@{iibRemoteBrokerHost}.log" />
									<param name="logFileName" value="IIBDeploy.@{barName}.@{iibRemoteBrokerHost}.${IIB_PORT}.${IIB_QMGR}.log" />

								</antcall>

							</then>
							<else>
								<if>
									<isset property="IIB_USER_ID" />
									<then>

										<!-- Deploy bar by running mqsideploy locally on build machine running as designated user -->

										<echo message="Deploying bar file: ${BUILD_SUBSCRIPTS}/deployBarAsUser.sh ${barToDeploy} ${execGroup} ${IIT_BIN} ${MQSI_BIN} ${BUILD_HOME} @{iibRemoteBrokerHost} ${IIB_PORT} ${IIB_QMGR} ${iib_clean_deploy_switch} ${iib_timeout_switch} ${IIB_USER_ID} ${BUILD_LOGS}/deploy-@{barName}-@{iibRemoteBrokerHost}.log" />

										<exec dir="${BUILD_SUBSCRIPTS}" executable="sh" output="${BUILD_LOGS}/IIBDeploy.@{barName}.@{iibRemoteBrokerHost}.${IIB_PORT}.${IIB_QMGR}.log" failonerror="false" resultproperty="error.IIBDeploy.@{barName}.@{iibRemoteBrokerHost}.property">
											<arg value="deployBarAsUser.sh" />
											<arg value="${barToDeploy}" />
											<arg value="" />
											<arg value="${execGroup}" />
											<arg value="${IIT_BIN}" />
											<arg value="${MQSI_BIN}" />
											<arg value="${BUILD_HOME}" />
											<arg value="@{iibRemoteBrokerHost}" />
											<arg value="${IIB_PORT}" />
											<arg value="${IIB_QMGR}" />
											<arg value="${iib_clean_deploy_switch}" />
											<arg value="${iib_timeout_switch}" />
											<arg value="${IIB_USER_ID}" />
											<arg value="${BUILD_LOGS}/deploy-@{barName}-@{iibRemoteBrokerHost}.log" />
										</exec>

									</then>
									<else>

										<!-- Deploy bar by running mqsideploy locally on build machine under current user... -->

										<if>
											<isset property="bar.@{barName}.broker" />
											<then>

												<!-- ...and local broker -->

												<echo message="Deploy to local broker ${bar.@{barName}.broker}" />

												<exec dir="${BUILD_SUBSCRIPTS}" executable="sh" output="${BUILD_LOGS}/IIBDeploy.@{barName}.@{iibRemoteBrokerHost}.${IIB_PORT}.${IIB_QMGR}.log" failonerror="false" resultproperty="error.IIBDeploy.@{barName}.@{iibRemoteBrokerHost}.property">
													<arg value="deployBar.sh" />
													<arg value="${barToDeploy}" />
													<arg value="${bar.@{barName}.broker}" />
													<arg value="${execGroup}" />
													<arg value="${IIT_BIN}" />
													<arg value="${MQSI_BIN}" />
													<arg value="${BUILD_HOME}" />
													<arg value="" />
													<arg value="" />
													<arg value="" />
													<arg value="" />
													<arg value="${iib_clean_deploy_switch}" />
													<arg value="${iib_timeout_switch}" />
													<arg value="${BUILD_LOGS}/deploy-@{barName}-@{iibRemoteBrokerHost}.log" />
												</exec>

											</then>
											<else>
												<if>
													<isset property="bar.@{barName}.brokerFile" />
													<then>

														<!-- ...and broker file -->

														<echo message="Deploy using broker file ${bar.@{barName}.brokerFile}" />

														<exec dir="${BUILD_SUBSCRIPTS}" executable="sh" output="${BUILD_LOGS}/IIBDeploy.@{barName}.@{iibRemoteBrokerHost}.${IIB_PORT}.${IIB_QMGR}.log" failonerror="false" resultproperty="error.IIBDeploy.@{barName}.@{iibRemoteBrokerHost}.property">
															<arg value="deployBar.sh" />
															<arg value="${barToDeploy}" />
															<arg value="" />
															<arg value="${execGroup}" />
															<arg value="${IIT_BIN}" />
															<arg value="${MQSI_BIN}" />
															<arg value="${BUILD_HOME}" />
															<arg value="" />
															<arg value="" />
															<arg value="" />
															<arg value="${bar.@{barName}.brokerFile}" />
															<arg value="${iib_clean_deploy_switch}" />
															<arg value="${iib_timeout_switch}" />
															<arg value="${BUILD_LOGS}/deploy-@{barName}-@{iibRemoteBrokerHost}.log" />
														</exec>

													</then>
													<else>

														<!-- ...and host, port and queue manager -->

														<echo message="Deploy using host, port and queue manager: @{iibRemoteBrokerHost}, ${IIB_PORT}, ${IIB_QMGR}" />

														<echo message="Deploying bar file: ${BUILD_SUBSCRIPTS}/deployBar.sh ${barToDeploy} ${execGroup} ${IIT_BIN} ${MQSI_BIN} ${BUILD_HOME} @{iibRemoteBrokerHost} ${IIB_PORT} ${IIB_QMGR} ${iib_clean_deploy_switch} ${iib_timeout_switch} ${BUILD_LOGS}/deploy-@{barName}-@{iibRemoteBrokerHost}.log" />

														<exec dir="${BUILD_SUBSCRIPTS}" executable="sh" output="${BUILD_LOGS}/IIBDeploy.@{barName}.@{iibRemoteBrokerHost}.${IIB_PORT}.${IIB_QMGR}.log" failonerror="false" resultproperty="error.IIBDeploy.@{barName}.@{iibRemoteBrokerHost}.property">
															<arg value="deployBar.sh" />
															<arg value="${barToDeploy}" />
															<arg value="" />
															<arg value="${execGroup}" />
															<arg value="${IIT_BIN}" />
															<arg value="${MQSI_BIN}" />
															<arg value="${BUILD_HOME}" />
															<arg value="@{iibRemoteBrokerHost}" />
															<arg value="${IIB_PORT}" />
															<arg value="${IIB_QMGR}" />
															<arg value="" />
															<arg value="${iib_clean_deploy_switch}" />
															<arg value="${iib_timeout_switch}" />
															<arg value="${BUILD_LOGS}/deploy-@{barName}-@{iibRemoteBrokerHost}.log" />
														</exec>

													</else>
												</if>
											</else>
										</if>

									</else>

								</if>

							</else>
						</if>
						<antcall target="-checkIIBErrors">
							<param name="fileToCheck" value="${BUILD_LOGS}/IIBDeploy.@{barName}.@{iibRemoteBrokerHost}.${IIB_PORT}.${IIB_QMGR}.log" />
							<param name="fileToCheckLabel" value="Deploy @{barName} log file (with error description)." />
							<param name="returnCode" value="${error.IIBDeploy.@{barName}.@{iibRemoteBrokerHost}.property}" />
						</antcall>

						<antcall target="-checkIIBErrors">
							<param name="fileToCheck" value="${BUILD_LOGS}/deploy-@{barName}-@{iibRemoteBrokerHost}.log" />
							<param name="fileToCheckLabel" value="Deploy @{barName} log file (with error description)." />
							<param name="returnCode" value="${error.IIBDeploy.@{barName}.@{iibRemoteBrokerHost}.property}" />
						</antcall>

						<logPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${BUILD_LOGS}/deploy-@{barName}-@{iibRemoteBrokerHost}.log" label="Deploy @{barName} log file." />

					</sequential>
				</for>
			</sequential>
		</for>

		<!-- Update system state based on deploy -->

		<antcall target="-applySystemChanges" />

	</target>

	<target name="-restartBroker">

		<if>
			<equals arg1="${PREVIEW}" arg2="Y" />
			<then>

				<echo message="NOTE: Running in preview mode - actions will be displayed only and not executed." />
				<echo message="PREVIEW: ${MQSI_BIN}/mqsireload ${brokerName}" />

			</then>
			<else>

				<echo message="Restarting broker ${brokerName}" />

				<!-- Restart broker -->

				<exec dir="${BUILD_SUBSCRIPTS}" executable="/usr/bin/expect" output="${BUILD_LOGS}/IIBRestart.${brokerName}.log" failonerror="false" resultproperty="error.IIBRestart">
					<arg value="restartBroker.sh" />
					<arg value="${restartUser}" />
					<arg value="${restartPassword}" />
					<arg value="${restartHost}" />
					<arg value="${brokerName}" />
					<arg value="${MQSI_BIN}" />
				</exec>

				<!-- Check errors -->

				<antcall target="-checkIIBErrors">
					<param name="fileToCheck" value="${BUILD_LOGS}/IIBRestart.${brokerName}.log" />
					<param name="fileToCheckLabel" value="Restart ${brokerName} broker log file (with error description)." />
					<param name="returnCode" value="${error.IIBRestart}" />
				</antcall>

				<!-- Publish log -->

				<logPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${BUILD_LOGS}/IIBRestart.${brokerName}.log" label="Restart ${brokerName} broker log file." />

			</else>
		</if>

	</target>

	<target name="-init">

		<!-- Set platform override pre properties -->

		<antcallback target="-applyPlatformOverridesPre" return="BUILD_HOME" />

		<!-- Load property files -->

		<property file="../build-common-linux/build-common-pre.properties" />
		<property file="build.properties" />
		<property file="../build-common-linux/build-common-post.properties" />

		<!-- Set platform override post properties -->

		<antcallback target="-applyPlatformOverridesPost" return="BUILD_LOGS, BUILD_OUTPUT, BUILD_TMP, ASSEMBLY_PATH, RTC_PASSWORD, buildLabel, buildLink" />

		<!-- Execute common init steps -->

		<antcallback target="-initCommon" />

		<!-- Set ASSEMBLY_PATH subdirectory -->

		<var name="ASSEMBLY_BARS" value="${ASSEMBLY_PATH}/bars" />

		<if>
			<equals arg1="${pbc.platform}" arg2="ucd" />
			<then>
				<var name="ASSEMBLY_BARS" unset="true" />
				<var name="ASSEMBLY_BARS" value="${ASSEMBLY_PATH}" />
			</then>
		</if>

		<!-- Optionally load loadProperties if they exist -->

		<if>
			<available file="${BUILD_TMP}/loadProperties.properties" />
			<then>
				<loadproperties srcFile="${BUILD_TMP}/loadProperties.properties" />
			</then>
		</if>

		<!-- Determine passwords to use -->

		<echo message="Determine password to be used" />

		<if>
			<isset property="RTC_PASSWORD" />
			<then>
				<echo message="Using the RTC password set in the build definition" />
				<var name="rtcPassword" value="${RTC_PASSWORD}" />
			</then>
			<elseif>

				<isset property="RTC_ENCODED_PASSWORD" />
				<then>
					<echo message="Using the encoded RTC password - about to decode this" />

					<java classname="com.ibm.ws.security.util.PasswordDecoder" outputproperty="outproprtc" fork="true">
						<arg value="{xor}${RTC_ENCODED_PASSWORD}" />
						<classpath>
							<fileset dir="${WID_RUNTIME}/deploytool/itp/plugins">
								<include name="**/*.jar" />
							</fileset>
							<pathelement path="${java.class.path}" />
						</classpath>
					</java>
					<propertyregex property="RTC_DECODED_PASSWORD" input="${outproprtc}" regexp=".*decoded password == .(.*)." select="\1" />
					<var name="rtcPassword" value="${RTC_DECODED_PASSWORD}" />

				</then>

			</elseif>
			<else>

				<fail>Need to either have RTC_PASSWORD or RTC_ENCODED_PASSWORD property set.</fail>

			</else>
		</if>

		<echo message="Completed initialization" />

	</target>

	<target name="-initAppDeploy" depends="">

		<for list="${bars.list}" param="barName" delimiter=";">
			<sequential>

				<if>
					<and>
						<not>
							<isset property="IIB_EXEC_GRP" />
						</not>
						<not>
							<isset property="bar.@{barName}.execGroup" />
						</not>
					</and>
					<then>
						<fail>Need to either have IIB_EXEC_GRP property set as a default, or bar.&lt;barName&gt;.execGroup property set for each bar in bars.list.</fail>
					</then>
				</if>

			</sequential>
		</for>

	</target>

	<target name="-initTarget" depends="">

		<if>
			<isset property="propertyFileProjects.list" />

			<then>
				<if>
					<isset property="TARGET_OS_PASSWORD" />
					<then>
						<echo message="Using the target OS password set in the build definition" />
						<var name="targetOSPassword" value="${TARGET_OS_PASSWORD}" />
					</then>
					<elseif>

						<isset property="TARGET_OS_ENCODED_PASSWORD" />
						<then>
							<echo message="Using the encoded target OS password - about to decode this" />

							<exec dir="${BUILD_SUBSCRIPTS}/" executable="sh" output="${BUILD_TMP}/osDecoded" failonerror="true">
								<arg line="decodePassword.sh" />
								<arg value="${TARGET_OS_ENCODED_PASSWORD}" />
							</exec>

							<loadfile property="targetOSPassword" srcFile="${BUILD_TMP}/osDecoded" />

							<delete file="${BUILD_TMP}/osDecoded" />

						</then>

					</elseif>
					<else>

						<fail>Need to either have TARGET_OS_PASSWORD or TARGET_OS_ENCODED_PASSWORD property set.</fail>

					</else>
				</if>
			</then>
		</if>

	</target>

	<!-- This is used from the -deliverArtifactsToAssembly target from pbc-common -->

	<target name="-copyFilesToAssembly">

		<antcall target="-createProjectIfNew">
			<param name="projectToCheck" value="${ASSEMBLY_BARS}" />
		</antcall>

		<copy todir="${ASSEMBLY_BARS}">
			<fileset dir="${BUILD_OUTPUT}">
				<include name="*.bar" />
			</fileset>
		</copy>

	</target>

	<!-- This is used from the -loadProperties target from pbc-common -->

	<target name="-extractPropertiesFromJson">

		<!-- Get server name (aka execution group) to select from state store path to ensure we get the correct properties -->

		<propertyregex property="selectServerName" override="true" input="${stateStore.path}" regexp="/(.*)" select="\1" />

		<!-- Use a JavaScript segment of code to parse out properties and add them to a space-delimited list -->

		<script language="javascript">
			<![CDATA[
			
			//  Do necessary imports
		        
	        importClass(java.io.File);
	        importClass(java.io.FileReader);
	        importClass(java.io.BufferedReader);
	        importClass(java.io.FileWriter);
	        importClass(java.io.BufferedWriter);
			
			// Parse json into struct using eval		
			
			var json = project.getProperty("systemPropertiesJson");
			
	        var struct = eval("(" + json + ")");
			
			// Initialize return string
			
			var propertiesList = "";
			
			// >>> Parsing is done in this block
			{
			
				// Set host property
			
				propertiesList = "IIB_HOSTS.list=" + struct[0].hostName;
			
				// For each broker
			
				for(var i = 0; i < struct[0].brokers.length; i++)
				{
			
					var broker = struct[0].brokers[i];
			
					// For each server
			
					for(var j = 0; j < broker.servers.length; j++)
					{
						var server = broker.servers[j];	
			
						// If this is the selected server
			
						if (server.name == project.getProperty("selectServerName")) {
			
							// Set server name (aka execution group) property
			
							propertiesList = propertiesList + " IIB_EXEC_GRP=" + server.name;
				
							// Set port property
			
							propertiesList = propertiesList + " IIB_PORT." + struct[0].hostName + "=" + server.port;
			
							// Set queue manager property
			
							propertiesList = propertiesList + " IIB_QMGR." + struct[0].hostName + "=" + server.queueManager
						}
				
					}
				}
				// <<< End of parsing block
			}
			
			build.setProperty("propertiesList",propertiesList);
		        
		]]>
			</script>

			<!-- Write out parsed properties to log file -->

			<echo message="propertiesList=${propertiesList}" />

		</target>

		<!-- This is used from the -applySystemChanges target from pbc-common -->

		<target name="-updateStateStoreJson">

			<!-- Get server name (aka execution group) to select from state store path to ensure we update the correct one -->

			<propertyregex property="selectServerName" override="true" input="${stateStore.path}" regexp="/(.*)" select="\1" />

			<!-- Load Json file into property for parsing -->

			<loadfile property="stateStoreJson" srcFile="${stateStoreJsonFile}" />

			<!-- Get current bars list -->

			<propertyregex property="currentBarsList" override="true" input="${stateStoreJson}" regexp="servers&quot; : \[ \{ &quot;name&quot; : &quot;.+?\[(.+?)\]" select="\1" />

			<!-- Initialize updated bars list -->

			<var name="updatedBarsList" unset="true" />
			<var name="updatedBarsList" value="${currentBarsList}" />

			<!-- For each bar deployed -->

			<for list="${bars.list}" param="barName" delimiter=";">
				<sequential>

					<!-- Initialize temp list to hold value of updated list -->

					<var name="tempBarsList" unset="true" />
					<var name="tempBarsList" value="${updatedBarsList}" />

					<!-- Unset updated list and then add bar to list -->

					<var name="updatedBarsList" unset="true" />
					<var name="updatedBarsList" value="${tempBarsList},{ &quot;name&quot; : &quot;@{barName}&quot; }" />

				</sequential>
			</for>

			<echo message="updatedBarsList = ${updatedBarsList}" />

			<!-- Replace current bars list with updated list -->

			<propertyregex property="updatedStateStoreJson" override="true" input="${stateStoreJson}" regexp="(servers&quot; : \[ \{ &quot;name&quot; : &quot;.+?\[).+?(\])" replace="\1${updatedBarsList}\2" defaultValue="${stateStoreJson}" />

			<echo message="updatedStateStoreJson = ${updatedStateStoreJson}" />

		</target>

		<target name="-checkIIBErrors">

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="BIP0965E" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="does not exist" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="The file was not deployed" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="Invalid parameters" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="threw and exception" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="MQ reason code" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="has the status of 'FAILED'" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="Workspace has errors on it after the build" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="The broker rejected the deployment request" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="did not contain a top-level deployment descriptor" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="Permission denied" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="No such file or directory" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="The operation could not be completed by the broker:" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="Error compiling" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<echo message="Return code = ${returnCode}" />

			<if>
				<or>
					<isset property="failResponse" />
					<not>
						<equals arg1="${returnCode}" arg2="0" />
					</not>
				</or>
				<then>
					<echo message="Response is not OK" />

					<logPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${fileToCheck}" label="${fileToCheckLabel}" />

					<if>
						<equals arg1="${IGNORE_ERROR}" arg2="Y" />
						<then>
							<echo message="Ignoring error in ${fileToCheck}" />
						</then>
						<else>
							<fail message="Error message returned in ${fileToCheck}. Review contents of file in logs." />
						</else>
					</if>
				</then>
				<else>
					<echo message="Response is OK" />
				</else>
			</if>

		</target>

		<target name="-checkFileDeployErrors">

			<loadfile property="failResponse" srcfile="${fileToCheck}">
				<filterchain>
					<linecontainsregexp>
						<regexp pattern="Permission denied" />
					</linecontainsregexp>
				</filterchain>
			</loadfile>

			<if>
				<isset property="failResponse" />
				<then>
					<echo message="Response is not OK" />

					<logPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${RTC_USER_ID}" passwordFile="${RTC_PASSWORD_FILE}" verbose="true" filePath="${fileToCheck}" label="${fileToCheckLabel}" />

					<if>
						<equals arg1="${IGNORE_ERROR}" arg2="Y" />
						<then>
							<echo message="Ignoring error in ${fileToCheck}" />
						</then>
						<else>
							<fail message="Error message returned in ${fileToCheck}. Review contents of file in logs." />
						</else>
					</if>
				</then>
				<else>
					<echo message="Response is OK" />
				</else>
			</if>

		</target>

	</project>
